version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: lca_db
      POSTGRES_USER: lca_user
      POSTGRES_PASSWORD: lca_password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lca_user -d lca_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Backend
  backend:
    build: .
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn --bind 0.0.0.0:8000 lca_tool.wsgi:application
      "
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://lca_user:lca_password@db:5432/lca_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-production-secret-key-here
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Celery Worker
  celery:
    build: .
    command: celery -A lca_tool worker --loglevel=info
    volumes:
      - .:/app
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://lca_user:lca_password@db:5432/lca_db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
      - backend

  # Celery Beat Scheduler
  celery-beat:
    build: .
    command: celery -A lca_tool beat --loglevel=info
    volumes:
      - .:/app
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://lca_user:lca_password@db:5432/lca_db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
      - backend

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_volume:/var/www/static
      - media_volume:/var/www/media
    depends_on:
      - backend
      - frontend

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
